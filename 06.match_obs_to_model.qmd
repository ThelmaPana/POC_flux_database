---
title: "Match POC flux observations to model values."
subtitle: "For each POC flux observation, we want the corresponding values in model outputs."
author: "Thelma Panaïotis"
date: "2025/07/17"
format: 
  html:
    toc: true
    embed-resources: true
editor: visual
lightbox: true
execute: 
  warning: false
---

The goal is for each POC  flux observation to find the corresponding values in various model outputs. The difficulty is that each model has its own coordinates grid (1° or 2°, natural or decimal…). Then, for each model, we:

-   identify the coordinates grid

-   regularize coordinates of observations to match the grid

-   associate observations to model values

```{r set_up}
#| warning: false
#| cache: false

source("utils.R")
```

## Read data

First, we need to read both model data and observations gathered by Simon.

```{r read_data}
## Model outputs
load("data/00.g_obs_flux.Rdata")
load("data/01.mod_flux.Rdata")

# Flag obs-based products and reccap2 products + retrieve colours
g_obs_flux <- g_obs_flux %>% mutate(type = "Glob. obs.")
g_obs_cols <- g_obs_flux %>% select(model, depth, colour) %>% distinct()

mod_flux <- mod_flux %>% mutate(type = "RECCAP2")
mod_cols <- mod_flux %>% select(model, depth, colour) %>% distinct()

## Observations
load("data/02.obs_flux_targ.Rdata")
# Keep only relevant columns
obs_flux_targ <- obs_flux_targ |> 
  select(id, method, lon, lat, depth, target_depth, poc_flux_obs)
```

## Prepare model configurations

Let’s now list all model configurations that we will have to iterate on.

```{r model_configs}
# Combine all model data
df_models <- g_obs_flux %>% 
  bind_rows(mod_flux) %>% 
  # Standardize model names for compatibility
  mutate(
    model = str_to_lower(model), # lower case
    model = str_replace_all(model, "[\\s−-]", "_")  # replace spaces and dashes with underscores
  )

# List of unique model-depth configurations
model_configs <- df_models %>% 
  select(model, depth) %>% 
  distinct() %>%
  arrange(model, depth)
```

## Match observations to model grids

There are 3 possible grid types within models:

-   case 1: points at coordinates 0.5, 1.5, 2.5 on a 1° grid

    -   strategy: floor to resolution (1°) + add half of resolution (0.5°)

-   case 2: points at coordinates 1, 3, 5... on a 2° grid

    -   strategy: floor to resolution (2°) + add half of resolution (1°)

-   case 3: points at coordinates 0, 1, 2 on a 1° grid

    -   strategy: round to resolution (1°)

```{r align_obs_to_grid}
# Loop over models
match_obs <- lapply(1:nrow(model_configs), function(i) {
  
  # Get current configuration
  conf <- model_configs %>% slice(i)  
  model_name <- conf %>% pull(model)
  target_depth_val <- conf %>% pull(depth)
  
  # Data for the model of interest
  mod_data <- df_models %>% filter(model == !!model_name & depth == !!target_depth_val)
  
  # Get model grid coordinates
  lon_values <- sort(unique(mod_data$lon))
  lat_values <- sort(unique(mod_data$lat))
  
  # Get grid resolution
  lon_grid <- abs(median(diff(lon_values)))
  lat_grid <- abs(median(diff(lat_values)))
  
  # Filter observations for the depth of interest
  obs_subset <- obs_flux_targ %>% filter(target_depth == !!target_depth_val)
  
  # Coordinate alignment according to the 3 possible cases
  df_aligned <- obs_subset %>%
    mutate(
      # Longitude alignment
      lon_grid = case_when(
        # Case 1
        abs(median(lon_values %% lon_grid) - 0.5) < 1e-10 ~ 
          roundp(lon, precision = lon_grid, f = floor) + lon_grid/2,
        # Case 2
        abs(median(lon_values %% lon_grid) - 1) < 1e-10 ~ 
          roundp(lon, precision = lon_grid, f = floor) + lon_grid/2,
        # Case 3
        abs(median(lon_values %% lon_grid) - 0) < 1e-10 ~ 
          roundp(lon, precision = lon_grid, f = round),
        # Default to NA
        .default = NA_real_
      ),
      # Latitude alignment  
      lat_grid = case_when(
        # Case 1
        abs(median(lat_values %% lat_grid) - 0.5) < 1e-10 ~ 
          roundp(lat, precision = lat_grid, f = floor) + lat_grid/2,
        # Case 2
        abs(median(lat_values %% lat_grid) - 1) < 1e-10 ~ 
          roundp(lat, precision = lat_grid, f = floor) + lat_grid/2,
        # Case 3
        abs(median(lat_values %% lat_grid) - 0) < 1e-10 ~ 
          roundp(lat, precision = lat_grid, f = round),
        # Default to NA
        .default = NA_real_
      )
    )
  
  # Join with model data
  result <- df_aligned %>%
    select(id, method, lon, lat, lon_grid, lat_grid, depth, target_depth, poc_flux_obs) %>%
    left_join(
      mod_data %>% 
        select(-depth) %>% 
        rename(lon_grid = lon, lat_grid = lat),
      by = join_by(lon_grid, lat_grid)
    )
  
  return(result)
  
}) %>% 
  bind_rows()

```

## Check matching

Let’s now check that the match-up went well.

```{r check}
# Matching validation by model
validation_summary <- match_obs %>%
  group_by(model, target_depth) %>%
  summarise(
    total_obs = n(),
    failed_alignment = sum(is.na(lon_grid) | is.na(lat_grid)),
    failed_match = sum(is.na(poc_flux)),
    success_match = total_obs - failed_match,
    success_rate = success_match / total_obs,
    .groups = "drop"
  )

# Plot it
ggplot(validation_summary) + 
  geom_col(aes(y = model, x = success_match, fill = success_rate)) +
  scale_fill_viridis_c(limits = c(0, 1)) + 
  labs(x = "N obs matched", y = "Model", fill = "Matching\nrate") +
  facet_wrap(~target_depth, ncol = 2, scales = "free", labeller = labeller(target_depth = function(x) paste0(x, " m"))) +
  theme_classic() +
  theme(strip.background = element_blank())
```

Match-up is rather good, except for Siegel 2014, Schlitzer 2000 and cesm_ethz at 100 m. This is caused by the coverage (or lack of coverage) of models. Let’s have a quick look at unmatched observations for both models.

```{r map_unmatched_siegel}
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_models |> filter(model == "siegel_2014"), aes(x = lon, y = lat, fill = poc_flux)) +
  geom_point(data = match_obs |> filter(model == "siegel_2014" & is.na(poc_flux)), aes(x = lon, y = lat), size = 0.5, colour = "red") +
  scale_fill_viridis_c(na.value = NA, trans = "log1p") +
  labs(x = "Longitude", y = "Latitude", fill = "POC\nflux") +
  coord_quickmap(expand = 0)
```

Unmatched observations are indeed in location not covered by Siegel 2014.

```{r map_unmatched_schlitzer}
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_models |> filter(model == "schlitzer_2000"), aes(x = lon, y = lat, fill = poc_flux)) +
  geom_point(data = match_obs |> filter(model == "schlitzer_2000" & is.na(poc_flux)), aes(x = lon, y = lat), size = 0.5, colour = "red") +
  scale_fill_viridis_c(na.value = NA, trans = "log1p") +
  labs(x = "Longitude", y = "Latitude", fill = "POC\nflux") +
  coord_quickmap(expand = 0)
```

Same for Schlitzer 2000.

```{r map_unmatched_cesm_ethz}
ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(data = df_models |> filter(model == "cesm_ethz"& depth == 100), aes(x = lon, y = lat, fill = poc_flux)) +
  geom_point(data = match_obs |> filter(model == "cesm_ethz" & target_depth == 100 & is.na(poc_flux)), aes(x = lon, y = lat), size = 0.5, colour = "red") +
  scale_fill_viridis_c(na.value = NA, trans = "log1p") +
  labs(x = "Longitude", y = "Latitude", fill = "POC\nflux") +
  coord_quickmap(expand = 0)
```

Same for cesm_ethz.

## Reformat results

Reshape results to have one column per model.

```{r reformat}
# Separate results by target depth
match_obs_100 <- match_obs %>% filter(target_depth == 100)
match_obs_1000 <- match_obs %>% filter(target_depth == 1000)

# First we need the list of models for each target depth
mod_list_100 <- match_obs_100 %>% 
  filter(!is.na(poc_flux)) %>%
  pull(model) %>% 
  unique()
mod_list_1000 <- match_obs_1000 %>% 
  filter(!is.na(poc_flux)) %>%
  pull(model) %>% 
  unique()

# Convert to a wider format (one column per model)
match_obs_wide_100 <- match_obs_100 %>%
  # Delete model metadata
  select(-c(lon_grid, lat_grid, colour, type)) %>%
  # Keep only listed models for that depth
  filter(model %in% mod_list_100) %>%
  # Make wider
  pivot_wider(
    values_from = poc_flux, 
    names_from = model,
    values_fill = NA
  )
match_obs_wide_1000 <- match_obs_1000 %>%
  # Delete model metadata
  select(-c(lon_grid, lat_grid, colour, type)) %>%
  # Keep only listed models for that depth
  filter(model %in% mod_list_1000) %>%
  # Make wider
  pivot_wider(
    values_from = poc_flux, 
    names_from = model,
    values_fill = NA
  )
```

## Save results

```{r save}
write_csv(match_obs_wide_100, file = "data/06.poc_flux_match_100.csv")
write_csv(match_obs_wide_1000, file = "data/06.poc_flux_match_1000.csv")
```
