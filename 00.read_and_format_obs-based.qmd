---
title: "Read and format POC flux from observation-based data listed in Doney et al., 2024"
author: "Thelma Panaïotis"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor: visual
lightbox: true
execute:
  cache: true
  warning: false
---

```{r set_up}
#| output: false
#| cache: false
source("utils.R")
```

## Read datasets

### Wang 2023

```{r wang_2023}
#| fig-column: body-outset
#| out-width: 100%
# Read matrix of export data
mat_wang <- readMat("data/raw/Cexp_CAFE_kl24h.mat")$EXP
# Define target fields and corresponding depths
targets <- c("POC100", "POC1000")
depths <- c("POC100" = 100, "POC1000" = 1000)
# Read lon and lat values from Wang paper https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-023-06772-4/MediaObjects/41586_2023_6772_MOESM7_ESM.xlsx
lon_lat <- read_excel("data/raw/41586_2023_6772_MOESM2_ESM.xlsx", col_types = c("numeric", "numeric", "skip"))
lat_values <- lon_lat %>% distinct(lat) %>% pull()
lon_values <- lon_lat %>% distinct(lon) %>% pull()

# Process each target field
df_wang_2023 <- map_dfr(targets, function(targ) {
  
  # Extract the relevant matrix for the target
  d <- mat_wang[,,1][[targ]]
  
  # Convert matrix to dataframe with lat and lon as rownames and colnames
  df <- as.data.frame(d) %>%
    rownames_to_column(var = "lat") %>%
    setNames(c("lat", lon_values)) %>%
    pivot_longer(cols = -lat, names_to = "lon", values_to = "poc_flux") %>%
    mutate(
      # Convert lat and lon to numeric
      lat = as.numeric(lat_values[as.numeric(lat)]),
      lon = as.numeric(lon),
      
      # Recenter longitude over the Atlantic Ocean
      lon = ifelse(lon > 180, lon - 360, lon),
      
      # Assign depth and apply the flux conversion
      depth = depths[targ],
      poc_flux = na_if(poc_flux, 0),  # Convert 0 to NA ,
      poc_flux = poc_flux / 365.25 * 12,  # Convert POC flux from mmol m⁻² y⁻¹ to mg C m⁻² d⁻¹
      
      # Add model name
      model = "Wang 2023"
    )
  
  return(df)
}) %>% 
  select(lon, lat, depth, poc_flux, model) # Reorganize the final columns

# Regularize lat grid at 2°
df_wang_2023 <- df_wang_2023 |> 
  # Round latitude to 2° and use middle of pixels
  mutate(lat = roundp(lat, precision = 2, f = floor) + 1) |> 
  # Compute mean POC flux for each pixel and depth
  group_by(lon, lat, depth, model) |> 
  summarise(poc_flux = mean(poc_flux, na.rm = TRUE), .groups = "drop") |> 
  select(lon, lat, depth, poc_flux, model)

# Plot to check
ggplot(df_wang_2023) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux)) +
  scale_fill_viridis_c(na.value = NA) +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  ggtitle("Wang 2023") +
  coord_quickmap(expand = 0) +
  facet_wrap(~depth, ncol = 1, labeller = labeller(depth = function(x) paste0(x, " m")))
```

### Nowicki 2022

```{r nowicki_2022}
#| fig-column: body-outset
#| out-width: 100%
# Open file and extract variables
nc_now_2022 <- nc_open("data/raw/biopump_model_output.nc")
nc_data_now_2022 <- nc_now_2022 %>%
  {list(
    lon = ncvar_get(., "LON")[1,,1], 
    lat = ncvar_get(., "LAT")[,1,1], 
    depth = ncvar_get(., "DEPTH")[1,1,], 
    poc_flux = ncvar_get(., "POCflux") # mmolC/m^2/yr
  )} 
# Close file
nc_close(nc_now_2022)
# To vector and to single column df
df_now_2022 <- nc_data_now_2022$poc_flux %>% as.vector() %>% as.data.frame() %>% setNames("poc_flux")
# Add lon, lat and depth
df_now_2022$lat <- nc_data_now_2022$lat # need to start with lat because of how data is stored
df_now_2022$lon <- rep(nc_data_now_2022$lon, each = length(nc_data_now_2022$lat))
df_now_2022$depth <- rep(nc_data_now_2022$depth, each = length(nc_data_now_2022$lon)*length(nc_data_now_2022$lat))
# Clean and reformat data
df_now_2022 <- df_now_2022 %>% 
  as_tibble() %>% 
  mutate(
    lon = ifelse(lon > 180, lon - 360, lon), # Center map on 0 longitude
    poc_flux = na_if(poc_flux, 0),  # Convert 0 to NA ,
    poc_flux = poc_flux / 365.25 * 12,       # Convert mmol m⁻² y⁻¹ to mgC m⁻² d⁻¹
    model = "Nowicki 2022"
  ) %>%
  filter(between(depth, 90, 100) | between(depth, 900, 1000)) %>%
  mutate(
    depth = case_when(
      depth < 100 ~ 100,
      depth > 100 ~ 1000
    )
  ) %>%
  select(lon, lat, depth, poc_flux, model) # Reorganize the final columns

# Regularize lat grid at 2°
df_now_2022 <- df_now_2022 |> 
  # Round latitude to 2° and use middle of pixels
  mutate(lat = roundp(lat, precision = 2, f = floor) + 1) |> 
  # Compute mean POC flux for each pixel and depth
  group_by(lon, lat, depth, model) |> 
  summarise(poc_flux = mean(poc_flux, na.rm = TRUE), .groups = "drop") |> 
  select(lon, lat, depth, poc_flux, model)

# Plot to check
ggplot(df_now_2022) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux)) +
  scale_fill_viridis_c(na.value = NA) +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  ggtitle("Nowicki 2022") +
  coord_quickmap(expand = 0) +
  facet_wrap(~depth, ncol = 1, labeller = labeller(depth = function(x) paste0(x, " m")))
```

### Schlitzer 2000

```{r schlitzer_2000}
#| fig-column: body-outset
#| out-width: 100%
# Open file and extract variables
nc_sch_2000 <- nc_open("data/raw/schlitzer_POCfill_360_180g.nc")
nc_data_sch_2000 <- nc_sch_2000 %>%
  {list(
    lon = ncvar_get(., "NEWX2"), 
    lat = ncvar_get(., "NEWY"), 
    depth = ncvar_get(., "DEPTH"), 
    poc_flux = ncvar_get(., "POC_EXPORT") # gC/m^2/yr
  )}
# Close file
nc_close(nc_sch_2000)
## NB there is a typo in the depth, it should be 100 m, let’s fix it
nc_data_sch_2000$depth <- 100
# To vector and to single column df
df_sch_2000 <- nc_data_sch_2000$poc_flux %>% as.vector() %>% as.data.frame() %>% setNames("poc_flux")
# Add lon, lat and depth
df_sch_2000$lon <- nc_data_sch_2000$lon
df_sch_2000$lat <- rep(nc_data_sch_2000$lat, each = length(nc_data_sch_2000$lon))
df_sch_2000$depth <- rep(nc_data_sch_2000$depth, each = length(nc_data_sch_2000$lon)*length(nc_data_sch_2000$lat))
# Clean and reformat data
df_sch_2000 <- df_sch_2000 %>% 
  as_tibble() %>% 
  mutate(
    poc_flux = na_if(poc_flux, 0),  # Convert 0 to NA ,
    poc_flux = (poc_flux * 1000) / 365.25,  # Convert gC m⁻² y⁻¹ to mgC m⁻² d⁻¹
    model = "Schlitzer 2000"
  ) %>%
  select(lon, lat, depth, poc_flux, model) # Reorganize the final columns

# Plot to check
ggplot(df_sch_2000) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux)) +
  scale_fill_viridis_c(na.value = NA) +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  ggtitle("Schlitzer 2000") +
  coord_quickmap(expand = 0) +
  facet_wrap(~depth, ncol = 1, labeller = labeller(depth = function(x) paste0(x, " m")))
```

### Siegel 2014

Data from Siegel 2014, Henson 2012, Laws 2000, Laws 2011 and Dunne 2014 are in the same mat file, but Siegel 2014 has a slightly different coordinates grid. These are already mg C m⁻² d⁻¹, no need to convert.

```{r siegel_2014}
mat_calipso <- readMat("data/raw/export4CALIPSO2.mat")

# Get lon and lat values for Siegel 2014
lon_values <- mat_calipso$lon[1,]
lat_values <- mat_calipso$lat[1,]

# Get matrix
mat_sieg <- mat_calipso$Siegel

# Convert to dataframe
df_sieg_2014 <- as.data.frame(mat_sieg) %>%
  rownames_to_column(var = "lat") %>%
  setNames(c("lat", lon_values)) %>%
  pivot_longer(cols = -lat, names_to = "lon", values_to = "poc_flux") %>%
  mutate(
    # Convert lat and lon to numeric
    lat = as.numeric(lat_values[as.numeric(lat)]),
    lon = as.numeric(lon),
    
    # Recenter longitude over the Atlantic Ocean
    lon = ifelse(lon > 180, lon - 360, lon),
    
    # Assign depth and apply the flux conversion
    depth = 100,
    poc_flux = na_if(poc_flux, 0),  # Convert 0 to NA ,
    
    # Add model name
    model = "Siegel 2014"
  ) %>% 
  select(lon, lat, depth, poc_flux, model) # Reorganize the final columns

# Plot map
ggplot(df_sieg_2014) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux)) +
  scale_fill_viridis_c(na.value = NA) +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  ggtitle("Siegel 2014") +
  coord_quickmap(expand = 0) +
  facet_wrap(~depth, ncol = 1, labeller = labeller(depth = function(x) paste0(x, " m")))

```

### Henson 2012, Laws 2000, Laws 2011, Dunne 2014

```{r others}
# List names of models and target names in the mat file
calipso_models <- tribble(
  ~target, ~model,
  "EPCDn", "Dunne 2007",
  "EPCHn", "Henson 2012",
  "EPCLC", "Laws 20XX",
  "EPCLF", "Laws 2000",
  "EPCL11", "Laws 2011"
)

# Get lon and lat values
lon_values <- mat_calipso$lonE[1,]
lat_values <- mat_calipso$latE[,1] # lat grid is not regular!!!

# Apply an anonymous function to all targets and bind rows into a single dataframe
df_epc <- map_dfr(calipso_models$target, function(targ) {
  
  # Extract the relevant matrix for the target
  d <- mat_calipso[[targ]]
  
  # Convert matrix to dataframe with lat and lon as rownames and colnames
  df <- as.data.frame(d) %>%
    rownames_to_column(var = "lat") %>%
    setNames(c("lat", lon_values)) %>%
    pivot_longer(
      cols = -lat, 
      names_to = "lon", 
      values_to = "poc_flux"
    ) %>%
    mutate(
      # Convert lat and lon to numeric
      lat = as.numeric(lat_values[as.numeric(lat)]),
      lon = as.numeric(lon),
      
      # Recenter longitude over the Atlantic Ocean
      lon = ifelse(lon < -180, lon + 360, lon),
      
      # Assign depth and apply the flux conversion
      depth = 100,
      poc_flux = na_if(poc_flux, 0),  # Convert 0 to NA 
      
      # Add model name based on target name
      model = calipso_models %>% filter(target == targ) %>% pull(model)
    ) %>%
    select(lon, lat, depth, poc_flux, model) # Reorganize the final columns
  
  # Regularize the lat grid
  df <- df %>%
    mutate(lat = roundp(lat, precision = 1, f = floor) + 1) %>%
    group_by(model, lon, lat, depth) %>%
    summarise(
      poc_flux = mean(poc_flux, na.rm = TRUE),
      .groups = "drop"
    )
  
  # Return processed dataframe
  return(df)
})

ggplot(df_epc) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_tile(aes(x = lon, y = lat, fill = poc_flux)) +
  scale_fill_viridis_c(na.value = NA, trans = "log1p") +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  facet_wrap(~model) +
  coord_quickmap(expand = 0)
```

## Store together and save

NB: each dataset has its own coordinates grid.

```{r store}
# Assemble
g_obs_flux <- bind_rows(
  df_wang_2023,
  df_now_2022,
  df_sch_2000,
  df_sieg_2014,
  df_epc
)
```

Let’s also assign a colour for each model.

```{r colours}
# 8 models at 100 m -> 8 colours
# 2 models at 100 m -> 2 colours
## Assign colours to models
colours <- g_obs_flux %>% 
  select(model) %>% 
  distinct() %>% 
  mutate(
    colour = paletteer_d("miscpalettes::pastel", n = n())
  )

g_obs_flux <- g_obs_flux %>% 
  left_join(colours, by = join_by(model)) %>% 
  arrange(model) %>% 
  mutate(model = fct_inorder(model)) # model as factor
```

## Remove inland points

Some model have POC flux values for inland pixels. Set these to NA.

```{r rm_inland}
# Flag inland points
g_obs_flux <- g_obs_flux %>% 
  mutate(inland = sp::point.in.polygon(lon, lat, coast$lon, coast$lat) == 1)

# Plot non null POC flux that are inland
g_obs_flux %>% 
  mutate(model_depth = paste0(model, " - ", depth, " m")) %>% 
  ggplot() +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux > 0 & inland)) +
  scale_fill_viridis_d(na.value = NA) +
  labs(x = "Longitude", y = "Latitude", fill = "Inland POC") +
  facet_wrap(~model_depth, ncol = 3) +
  coord_quickmap(expand = 0)

# Indeed some pixels to remove
g_obs_flux <- g_obs_flux %>% 
  mutate(poc_flux = ifelse(inland, NA, poc_flux)) %>%  # set inland POC flux to NA
  select(-inland)

# Also drop negative flux values
g_obs_flux <- g_obs_flux %>% mutate(poc_flux = ifelse(poc_flux < 0, NA, poc_flux))
```

## Plot everything

Generate interaction between model and depth to plot all combinations.

```{r plot_all}
g_obs_flux %>% 
  mutate(model_depth = paste0(model, " - ", depth, " m")) %>% 
  ggplot() +
  geom_raster(aes(x = lon, y = lat, fill = poc_flux)) +
  geom_polygon(data = world, aes(x = lon, y = lat, group = group), fill = "grey") +
  scale_fill_viridis_c(na.value = NA, trans = "log1p") +
  labs(x = "Longitude", y = "Latitude", fill = "POC flux") +
  facet_wrap(~model_depth, ncol = 3) +
  coord_quickmap(expand = 0)
```

All good!

## Save

```{r bind_and_save}
# Save
save(g_obs_flux, file = "data/00.g_obs_flux.Rdata")
```
